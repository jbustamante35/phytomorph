classdef stateCube < messageRouter
    
    
    properties
        % alive status
        isAlive;
        
        % router for communication
        router;
        
        
        
        pool;
        
        numWorkers;
        
        
        state;
        
        stateT;
        
       
    end
    
    methods
        function [obj] = stateCube(parentAddressEntry,childN,pauseDuration)
            
            
            
            % init the state cubde as a message router
            obj = obj@messageRouter();
            
            
            
            
            % add parent as first entry to address book
            obj.addEntry(parentAddressEntry);
            
            
            
            
            % create the pool if one does not exist
            if childN(1) ~= 0
                obj.pool = gcp('nocreate');
                if isempty(obj.pool)
                    obj.pool = parpool('local',childN(1));
                end
            end
            
            
            
            
                deltaDelay = 30; % set the delay to 3 sec
                publicFromWorkers = parallel.pool.DataQueue;
                
                
                
           
            % attach this function as a listener from main
            afterEach(publicFromWorkers, @(X)obj.processMessage(X));
            
                % eval par on pool
                future = parfevalOnAll(obj.pool,@(X,N,D)stateCube(X,N,D),1,publicFromWorkers,numWorkers,deltaDelay);
            
            
            % incoming from all
            sharedIn;
            
            
            % set the halt flag to false
            obj.isAlive = true;
            
            
            % set the worker into an inf loop with a stop condition
            obj.go(pauseDuration);
        end
        
        
        
        function [] = forceState(obj,state)
        
        end
        
        
        function [] = configure(obj,ID)
            obj.ID = ID;
        end
        
        
        function [] = halt(obj)
            obj.isAlive = false;
        end
        
        
        function [] = go(obj,pauseDuration)
            
           % send(obj.sharedToMain,obj.privateFromMain);
            
            while obj.isAlive
                
                pause(pauseDuration);
            end
            
            
        end
        
    end
end